PN Sequence Exp1

3bit 
clear;
clc;
a= input('Enter the 1st number ');
b= input('Enter the 2nd number ');
c= input('Enter the 3rd number ');
disp('A B C OUTPUT');
n= input('enter the value of n ');
for i=1:((2^n)-1);
    y=bitxor(c,b);
    s=y;
    x=sprintf('%d %d %d %d ', a,b,c,s);
    disp(x);
    c=b;
    b=a;
    a=s;
    end


4bit
clear;
clc;
a= input('Enter the 1st number ');
b= input('Enter the 2nd number ');
c= input('Enter the 3rd number ');
d= input('Enter the 4th number ');
disp('A B C D OUTPUT');
n= input('enter the value of n ');
for i=1:((2^n)-1);
    y=bitxor(c,d);
    s=y;
    x=sprintf('%d %d %d %d %d', a,b,c,d,s);
    disp(x);
    d=c;
    c=b;
    b=a;
    a=s;
    end
 

5bit

clear;
clc;
a= input('Enter the 1st number ');
b= input('Enter the 2nd number ');
c= input('Enter the 3rd number ');
d= input('Enter the 4th number ');
e= input('Enter the 5th number ');
disp('A B C D E OUTPUT');
n= input('enter the value of n ');
for i=1:((2^n)-1);
    y=bitxor(d,e);
    s=y;
    x=sprintf('%d %d %d %d %d %d', a,b,c,d,e,s);
    disp(x);
    e=d;
    d=c;
    c=b;
    b=a;
    a=s;
    end

Cluster Size Exp2

clc;
clear;
ToCh=960;
Ac=6;
At=2000;
N1=4;
N2=7;
Area1=6*4;
Area2=6*7;
no_clusters1=round(At/Area1);
no_clusters2=round(At/Area2);

Sys_cap1=no_clusters1*ToCh;
Sys_cap2=no_clusters2*ToCh;

printf("System Capacity with cluster size 4 is %d channels \n" ,Sys_cap1);
printf("Number of cluster for covering area witgh N=4 are %d \n ",no_clusters1);
printf("System Capacity with cluster size 7 is %d channels \n" ,Sys_cap2);

disp("On decreasing value of N from 7 to 4 System Capacity Increases");



Two Ray Ground Exp3

clc;
gt=20;
gr=28;
pt=2;
ht=10;
hr=2;
f=6000;
L=(3*10^8)/f;
po=pt*gt*gr;
d=1:1:20;

d1=sqrt((ht+hr)^2+d.^2);
d2=sqrt((ht-hr)^2+d.^2);
deld=d1-d2;
delfi=(2*%pi*deld)/L;
pr=po*((L./4*%pi*d).^2).*((delfi).^2);
pr_db=20*log(pr);
subplot(2,1,1)
plot(d,pr_db)
xlabel("Ditance in km");
ylabel("Received Power In db");
title("Two Ray Ground Reflection Model");
e0=0.001;
d0=1000;

et=abs(2*e0.*d0./d).*sin(delfi/2);
subplot(2,1,2)
plot(d,et)
xlabel("Ditance in km");
ylabel("Total Electric Field");
title("Electric Field Power")


Spectral Efficiency Exp4

clc;
bw=12.5;
bc=200*10^-3;
n=8;
tc=3;
N=4;
Au=8;
A=4000;
n1=bw/bc;
printf('Numbe of 200kHz channel %f \n' , n1);
n2=n*n1;
printf('Numbe of traffic channels %d \n' , n2);
n3=(n2/N)-tc;
printf('Actual Traffic/Cell %d \n' , n3);
t1=107.426;
n4=(t1*n2)/(A*bw);
printf('Spectral Efficiency of GSM channel %f \n' , n4);
Cell Splitting Exp5

clc;
R=2;
Rmac=R;
Rmin=R/2;
Rmic=R/4;
TAC=2000;
Amac=Rmac^2*2.598;
printf('Area of Macro cell is %f \n' ,Amac);
Amin=Rmin^2*2.598;
printf('Area of Mini cell is %f \n' ,Amin);
Amic=Rmic^2*2.598;
printf('Area of Micro cell is %f \n\n' ,Amic);
Nmac=TAC/Amac;
printf('Number 0f cells are %f \n' ,Nmac);
Nmin=TAC/Amin;
printf('Number 0f cells are %f \n' ,Nmin);
Nmic=TAC/Amic;
printf('Number 0f cells are %f \n\n' ,Nmic);

nc=16;

SysC_mac=Nmac*nc;
printf('System Capacity of Macro Cell is %f \n',SysC_mac);
SysC_min=Nmin*nc;
printf('System Capacity of Macro Cell is %f \n',SysC_min);
SysC_mic=Nmic*nc;
printf('System Capacity of Macro Cell is %f \n',SysC_mic);


Walsh Code Exp6

clc; 
clear all; 
n=input("Enter n value:"); 
w=0; 
s1=0;  
for i=1:log2(2*n)     
    a=[w,w];     
    b=[w,~w];     
    w=[a;b]; 
end 
disp(w); 
[r,c]=size(w) 
wb=zeros(r,c) 
for i=1:1:r 
    for j=1:1:c     
        if w(i,j)==0         
            wb(i,j)=-1      
        else         
            wb(i,j)=1     
        end  
    end 
end  
disp(wb); 
p=input("Enter first row"); 
q=input("Enter second row"); 
x=[wb(p,:)] 
s=x; 
disp([x]); 
y=[wb(q,:)] 
t=y; 
disp([y]);  
s1=sum(x.*y) 
disp(s1); 
if s1==0     
    disp("orthogonal"); 
else  
    disp("non arthogonal"); 
end  
f=input("Enter the bit which is to be changed in first row:"); 
s(f)=-s(f); 
disp(s) 
disp(t) 
s2=sum(s.*t); 
if s2==0      
    disp("orthogonal"); 
else 
    disp("non orthogonal"); 
end





Frequency Hopping Spread Spectrum Exp7

clc;
clear;
Tb = 1000;
n = 5;
k = 1;
Tc = 500;
Ts = Tb/n;
Rs = 1/Ts;
Rc = 1/Tc;
delf = 1/Rc;
L = 5;
m = 2^n;
Gp = m*k*L;
BWh = Gp*delf;
disp('Symbol duration',Ts);
disp('Symbol rate',Rs);
disp('Chip rate',Rc);
disp('Minimum seperation between frequency tones',delf);
disp('No. of frequency tones produced by frequency synthesizer',m);
disp('Processing gain',Gp);
disp('Hopping BW',BWh);



Convolution Encoder Exp8

clc;
clear all;
in=[1 0 1 1 1];
g1=[1 0 1 1];
g2=[1 1 1 1];
x1=round(conv(g1,in));
x2=round(conv(g2,in));
v1=pmodulo(x1,2);
v2=pmodulo(x2,2);

disp("Multiplexing the v1 and v2 to get the output sequence as");

a=5;
for i=1:5
    v2(a);
    v1(a);
    disp(v2(a),v1(a));
    a=a-1;
end


